#!/usr/bin/env python3
"""
Test des optimisations de co√ªt pour Stability AI
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cocktailaiser.settings')
sys.path.append('.')

django.setup()

from cocktails.services.ollama_service import UnifiedCocktailService

def test_cost_optimization():
    print("üí∞ Test des optimisations de co√ªt Stability AI")
    print("=" * 60)
    
    # Initialiser le service
    service = UnifiedCocktailService()
    
    # 1. Afficher les modes disponibles
    print("\n1Ô∏è‚É£ Modes de co√ªt disponibles:")
    modes = service.get_available_cost_modes()
    
    for mode_name, mode_info in modes.items():
        print(f"   üìä {mode_name.upper()}:")
        print(f"      ‚Ä¢ Mod√®le: {mode_info['model']}")
        print(f"      ‚Ä¢ Co√ªt: {mode_info['cost']} cr√©dits ({mode_info['cost_usd']})")
        print(f"      ‚Ä¢ Description: {mode_info['description']}")
        print()
    
    # 2. Test de changement de mode
    print("2Ô∏è‚É£ Test de changement de mode:")
    
    modes_to_test = ['economic', 'balanced', 'quality']
    
    for mode in modes_to_test:
        print(f"\n   üîÑ Passage en mode {mode.upper()}...")
        service.set_image_cost_mode(mode)
        
        status = service.get_image_service_status()
        print(f"      ‚Ä¢ Mod√®le actuel: {status['model']}")
        print(f"      ‚Ä¢ Co√ªt: {status['cost_per_image']} ({status['cost_in_usd']})")
        print(f"      ‚Ä¢ Optimisation: {status['optimization']}")
        
        # Calculer combien d'images possibles avec 25 cr√©dits gratuits
        if 'cr√©dits' in status['cost_per_image']:
            cost_num = float(status['cost_per_image'].split()[0])
            images_possible = int(25 / cost_num)
            print(f"      ‚Ä¢ Avec 25 cr√©dits gratuits: ~{images_possible} images")
    
    # 3. Recommandations
    print(f"\n3Ô∏è‚É£ Recommandations pour √©conomiser:")
    print(f"   üí° Mode ECONOMIC (recommand√© pour les tests):")
    print(f"      ‚Ä¢ Seulement 0.9 cr√©dit = $0.009 par image")
    print(f"      ‚Ä¢ 25 cr√©dits gratuits = ~27 images")
    print(f"      ‚Ä¢ R√©solution 512x512 (suffisant pour les cocktails)")
    print(f"      ‚Ä¢ Prompts simplifi√©s")
    
    print(f"\n   ‚öñÔ∏è Mode BALANCED (bon compromis):")
    print(f"      ‚Ä¢ 2.5 cr√©dits = $0.025 par image") 
    print(f"      ‚Ä¢ 25 cr√©dits gratuits = ~10 images")
    print(f"      ‚Ä¢ Meilleure qualit√©, g√©n√©ration rapide")
    
    print(f"\n   üíé Mode QUALITY (pour les d√©mos):")
    print(f"      ‚Ä¢ 4 cr√©dits = $0.040 par image")
    print(f"      ‚Ä¢ 25 cr√©dits gratuits = ~6 images")
    print(f"      ‚Ä¢ Haute qualit√©, d√©tails fins")
    
    # 4. Configuration recommand√©e
    print(f"\n4Ô∏è‚É£ Configuration recommand√©e dans .env:")
    print(f"   STABILITY_AI_COST_MODE=economic")
    print(f"   STABILITY_AI_MODEL=sdxl-1-0")
    
    print(f"\nüèÅ Test des optimisations termin√© !")
    print(f"=" * 60)

def test_prompt_optimization():
    print(f"\nüìù Test d'optimisation des prompts:")
    
    service = UnifiedCocktailService()
    
    # Tester diff√©rents modes
    test_cases = [
        ('economic', "Simple cocktail glass"),
        ('balanced', "Elegant cocktail with garnish"),
        ('quality', "Professional cocktail photography with detailed garnish and lighting")
    ]
    
    for mode, expected_style in test_cases:
        service.set_image_cost_mode(mode)
        print(f"   üé® Mode {mode}: Prompt style = {expected_style}")

if __name__ == "__main__":
    test_cost_optimization()
    test_prompt_optimization()
