from django.core.management.base import BaseCommand
from cocktails.services.ai_factory import ai_service
from django.conf import settings

class Command(BaseCommand):
    help = 'Teste la configuration du service Hugging Face'

    def handle(self, *args, **options):
        self.stdout.write("üß™ Test de configuration Hugging Face...\n")
        
        # V√©rifier la configuration
        self.stdout.write(f"Type de service: {settings.AI_SERVICE_TYPE}")
        self.stdout.write(f"Mod√®le texte: {settings.HUGGINGFACE_TEXT_MODEL}")
        self.stdout.write(f"Mod√®le image: {settings.HUGGINGFACE_IMAGE_MODEL}")
        
        if settings.HUGGINGFACE_API_KEY:
            self.stdout.write(self.style.SUCCESS("‚úÖ Cl√© API Hugging Face configur√©e"))
        else:
            self.stdout.write(self.style.WARNING("‚ö†Ô∏è  Pas de cl√© API (rate limiting appliqu√©)"))
        
        # Test de g√©n√©ration
        self.stdout.write("\nüçπ Test de g√©n√©ration de cocktail...")
        
        try:
            result = ai_service.generate_cocktail(
                "Un cocktail fruit√© et rafra√Æchissant", 
                "Test automatique"
            )
            
            self.stdout.write(self.style.SUCCESS(f"‚úÖ Cocktail g√©n√©r√©: {result['name']}"))
            self.stdout.write(f"Description: {result['description'][:100]}...")
            self.stdout.write(f"Ingr√©dients: {len(result['ingredients'])} ingr√©dients")
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå Erreur: {e}"))
        
        self.stdout.write("\n‚úÖ Test termin√©!")
