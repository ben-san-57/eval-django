import json
import logging
from typing import Dict, Any, Optional
import requests
from django.conf import settings
from .base_ai_service import BaseAIService

logger = logging.getLogger(__name__)

class MistralService(BaseAIService):
    """Service pour l'int√©gration avec l'API Mistral AI"""
    
    def __init__(self):
        self.api_key = settings.MISTRAL_API_KEY
        self.model = settings.MISTRAL_MODEL
        self.base_url = settings.MISTRAL_BASE_URL
        
        # Ne pas lever d'erreur imm√©diatement, mais logger
        if not self.api_key or self.api_key == 'your_mistral_api_key_here':
            logger.warning("‚ö†Ô∏è MISTRAL_API_KEY n'est pas configur√©e ou utilise la valeur par d√©faut")
            self.api_key = None
    
    def test_connection(self) -> bool:
        """Teste la connexion √† l'API Mistral"""
        if not self.api_key:
            logger.error("‚ùå Cl√© API Mistral manquante")
            return False
            
        try:
            headers = {
                'Authorization': f'Bearer {self.api_key}',
                'Content-Type': 'application/json'
            }
            
            # Test simple avec un prompt minimal
            response = requests.post(
                f"{self.base_url}/chat/completions",
                headers=headers,
                json={
                    "model": self.model,
                    "messages": [{"role": "user", "content": "Test"}],
                    "max_tokens": 5
                },
                timeout=10
            )
            
            if response.status_code == 200:
                logger.info("‚úÖ Connexion Mistral AI OK")
                return True
            elif response.status_code == 401:
                logger.error("‚ùå Cl√© API Mistral invalide (401 Unauthorized)")
                return False
            elif response.status_code == 429:
                logger.error("‚ùå Limite de taux d√©pass√©e ou cr√©dit √©puis√© (429)")
                return False
            else:
                logger.error(f"‚ùå Erreur connexion Mistral: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erreur connexion Mistral: {e}")
            return False
    
    def generate_cocktail_recipe(self, user_prompt: str, context: str = "") -> Dict[str, Any]:
        """G√©n√®re une recette de cocktail via l'API Mistral"""
        if not self.api_key:
            raise Exception("Cl√© API Mistral non configur√©e. Veuillez configurer MISTRAL_API_KEY dans .env")
            
        try:
            # Construction du prompt syst√®me
            system_prompt = self._build_system_prompt()
            
            # Construction du prompt utilisateur
            full_user_prompt = f"""
            Demande: {user_prompt}
            {f"Contexte: {context}" if context else ""}
            
            G√©n√®re une recette de cocktail cr√©ative et d√©taill√©e qui r√©pond parfaitement √† cette demande.
            """
            
            # Appel √† l'API Mistral
            headers = {
                'Authorization': f'Bearer {self.api_key}',
                'Content-Type': 'application/json'
            }
            
            payload = {
                "model": self.model,
                "messages": [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": full_user_prompt}
                ],
                "temperature": 0.8,
                "max_tokens": 2000
            }
            
            logger.debug(f"üåü Envoi requ√™te √† Mistral avec le mod√®le {self.model}")
            
            response = requests.post(
                f"{self.base_url}/chat/completions",
                headers=headers,
                json=payload,
                timeout=60
            )
            
            if response.status_code == 401:
                raise Exception("Cl√© API Mistral invalide. V√©rifiez votre MISTRAL_API_KEY dans .env")
            elif response.status_code == 429:
                raise Exception("Limite de taux d√©pass√©e ou cr√©dit Mistral √©puis√©. V√©rifiez votre compte Mistral.")
            elif response.status_code != 200:
                logger.error(f"‚ùå Erreur API Mistral: {response.status_code} - {response.text}")
                raise Exception(f"Erreur API Mistral: {response.status_code} - {response.text}")
            
            response_data = response.json()
            ai_response = response_data['choices'][0]['message']['content']
            
            logger.debug(f"‚úÖ R√©ponse Mistral re√ßue: {len(ai_response)} caract√®res")
            
            # Parser la r√©ponse JSON
            cocktail_data = self.parse_ai_response(ai_response)
            
            # Ajouter les m√©tadonn√©es du mod√®le
            cocktail_data['ai_model_used'] = f"mistral-{self.model}"
            cocktail_data['ai_service'] = "mistral"
            
            return cocktail_data
            
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå Erreur parsing JSON Mistral: {e}")
            raise Exception("La r√©ponse de Mistral n'est pas au format JSON attendu")
        except requests.RequestException as e:
            logger.error(f"‚ùå Erreur r√©seau Mistral: {e}")
            raise Exception(f"Erreur de connexion √† Mistral: {str(e)}")
        except Exception as e:
            logger.error(f"‚ùå Erreur g√©n√©ration Mistral: {e}")
            raise Exception(f"Erreur lors de la g√©n√©ration avec Mistral: {str(e)}")
    
    def _build_system_prompt(self) -> str:
        """Construit le prompt syst√®me pour Mistral"""
        return """Tu es un expert mixologue cr√©atif et innovant. Ta mission est de cr√©er des recettes de cocktails uniques et d√©licieuses.

IMPORTANT: Tu dois IMP√âRATIVEMENT r√©pondre uniquement avec un JSON valide, sans texte suppl√©mentaire.

Le JSON doit avoir exactement cette structure:
{
  "name": "Nom cr√©atif du cocktail",
  "description": "Description courte et all√©chante (50-80 mots)",
  "ingredients": [
    {
      "name": "Nom de l'ingr√©dient",
      "quantity": "Quantit√©",
      "unit": "ml/cl/cuill√®re/trait/etc",
      "type": "spirit/liqueur/mixer/garnish/other"
    }
  ],
  "instructions": [
    "√âtape 1 d√©taill√©e",
    "√âtape 2 d√©taill√©e",
    "√âtape 3 d√©taill√©e"
  ],
  "glassware": "Type de verre recommand√©",
  "garnish": "Garniture et d√©coration",
  "difficulty": "Facile/Moyen/Difficile",
  "preparation_time": "Temps en minutes",
  "serving_size": 1,
  "flavor_profile": ["saveur1", "saveur2", "saveur3"],
  "occasion": "Type d'occasion appropri√©",
  "strength": "Faible/Mod√©r√©/Fort"
}

R√®gles:
- Utilise des ingr√©dients r√©alistes et disponibles
- Assure-toi que les proportions sont √©quilibr√©es
- Sois cr√©atif mais r√©aliste
- Les quantit√©s doivent √™tre pr√©cises
- Adapte-toi au contexte et √† l'occasion mentionn√©s
"""
    
    def generate_cocktail(self, user_prompt: str, context: str = "") -> Dict[str, Any]:
        """G√©n√®re un cocktail complet via Mistral (m√©thode pour compatibilit√©)"""
        return self.generate_cocktail_recipe(user_prompt, context)
    
    def generate_image_prompt(self, cocktail_name: str, cocktail_description: str) -> str:
        """G√©n√®re un prompt pour l'image du cocktail"""
        return f"Professional cocktail photography of '{cocktail_name}', {cocktail_description}, elegant glassware, perfect lighting, restaurant quality, 4K resolution"
    
    def generate_image(self, image_prompt: str) -> Optional[str]:
        """Mistral ne g√©n√®re pas d'images, retourne None"""
        logger.info("Mistral AI ne supporte pas la g√©n√©ration d'images")
        return None
