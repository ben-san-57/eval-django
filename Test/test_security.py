"""
Test de s√©curit√© JWT et CSRF pour l'application cocktails
"""

import requests
import json
import os
import sys
import django

# Configuration Django
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cocktailaiser.settings')
django.setup()

BASE_URL = "http://127.0.0.1:8000"

def test_security():
    print("üîê Test de s√©curit√© JWT et CSRF")
    print("=" * 50)
    
    # Test 1: R√©cup√©ration du token CSRF
    print("\n1Ô∏è‚É£ Test CSRF Token")
    try:
        response = requests.get(f"{BASE_URL}/api/auth/csrf/")
        if response.status_code == 200:
            csrf_token = response.json()['csrfToken']
            print(f"   ‚úÖ Token CSRF r√©cup√©r√©: {csrf_token[:20]}...")
        else:
            print(f"   ‚ùå Erreur CSRF: {response.status_code}")
            return
    except Exception as e:
        print(f"   ‚ùå Erreur CSRF: {e}")
        return
    
    # Test 2: Tentative d'acc√®s non autoris√©
    print("\n2Ô∏è‚É£ Test acc√®s non autoris√©")
    try:
        response = requests.get(f"{BASE_URL}/api/cocktails/")
        if response.status_code == 401:
            print("   ‚úÖ Acc√®s correctement refus√© sans token")
        else:
            print(f"   ‚ùå S√©curit√© d√©faillante: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Erreur test non autoris√©: {e}")
    
    # Test 3: Inscription d'un utilisateur de test
    print("\n3Ô∏è‚É£ Test inscription")
    test_user = {
        "username": "testuser_security",
        "email": "test@security.com",
        "password": "TestPassword123!",
        "first_name": "Test",
        "last_name": "Security"
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/api/auth/register/",
            headers={'Content-Type': 'application/json'},
            data=json.dumps(test_user)
        )
        
        if response.status_code == 201:
            data = response.json()
            access_token = data['tokens']['access']
            refresh_token = data['tokens']['refresh']
            print(f"   ‚úÖ Inscription r√©ussie: {data['user']['username']}")
            print(f"   üîë Token JWT re√ßu: {access_token[:20]}...")
        else:
            print(f"   ‚ùå Erreur inscription: {response.status_code} - {response.text}")
            
            # Tenter une connexion si l'utilisateur existe d√©j√†
            print("   üîÑ Tentative de connexion...")
            login_response = requests.post(
                f"{BASE_URL}/api/auth/login/",
                headers={'Content-Type': 'application/json'},
                data=json.dumps({
                    "username": test_user["username"],
                    "password": test_user["password"]
                })
            )
            
            if login_response.status_code == 200:
                data = login_response.json()
                access_token = data['access']
                refresh_token = data['refresh']
                print(f"   ‚úÖ Connexion r√©ussie: {data['user']['username']}")
            else:
                print(f"   ‚ùå Erreur connexion: {login_response.status_code}")
                return
            
    except Exception as e:
        print(f"   ‚ùå Erreur inscription/connexion: {e}")
        return
    
    # Test 4: Acc√®s autoris√© avec token JWT
    print("\n4Ô∏è‚É£ Test acc√®s autoris√© avec JWT")
    try:
        headers = {
            'Authorization': f'Bearer {access_token}',
            'Content-Type': 'application/json'
        }
        
        response = requests.get(f"{BASE_URL}/api/auth/profile/", headers=headers)
        if response.status_code == 200:
            user_data = response.json()
            print(f"   ‚úÖ Profil utilisateur r√©cup√©r√©: {user_data['user']['username']}")
        else:
            print(f"   ‚ùå Erreur acc√®s profil: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Erreur test autoris√©: {e}")
    
    # Test 5: G√©n√©ration de cocktail s√©curis√©e
    print("\n5Ô∏è‚É£ Test g√©n√©ration cocktail s√©curis√©e")
    try:
        cocktail_request = {
            "prompt": "cocktail de test s√©curis√©",
            "context": "Test de s√©curit√© JWT"
        }
        
        response = requests.post(
            f"{BASE_URL}/api/generate/",
            headers=headers,
            data=json.dumps(cocktail_request)
        )
        
        if response.status_code == 201:
            cocktail_data = response.json()
            print(f"   ‚úÖ Cocktail g√©n√©r√©: {cocktail_data['cocktail']['name']}")
        else:
            print(f"   ‚ùå Erreur g√©n√©ration: {response.status_code} - {response.text}")
    except Exception as e:
        print(f"   ‚ùå Erreur test g√©n√©ration: {e}")
    
    # Test 6: V√©rification du token
    print("\n6Ô∏è‚É£ Test v√©rification token")
    try:
        verify_data = {"token": access_token}
        response = requests.post(
            f"{BASE_URL}/api/auth/token/verify/",
            headers={'Content-Type': 'application/json'},
            data=json.dumps(verify_data)
        )
        
        if response.status_code == 200:
            print("   ‚úÖ Token JWT valide")
        else:
            print(f"   ‚ùå Token invalide: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Erreur v√©rification token: {e}")
    
    # Test 7: Refresh du token
    print("\n7Ô∏è‚É£ Test refresh token")
    try:
        refresh_data = {"refresh": refresh_token}
        response = requests.post(
            f"{BASE_URL}/api/auth/token/refresh/",
            headers={'Content-Type': 'application/json'},
            data=json.dumps(refresh_data)
        )
        
        if response.status_code == 200:
            new_access = response.json()['access']
            print(f"   ‚úÖ Token refresh√©: {new_access[:20]}...")
        else:
            print(f"   ‚ùå Erreur refresh: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Erreur refresh token: {e}")
    
    # Test 8: D√©connexion s√©curis√©e
    print("\n8Ô∏è‚É£ Test d√©connexion")
    try:
        logout_data = {"refresh_token": refresh_token}
        response = requests.post(
            f"{BASE_URL}/api/auth/logout/",
            headers=headers,
            data=json.dumps(logout_data)
        )
        
        if response.status_code == 200:
            print("   ‚úÖ D√©connexion r√©ussie")
        else:
            print(f"   ‚ùå Erreur d√©connexion: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Erreur test d√©connexion: {e}")
    
    # Test 9: Tentative d'acc√®s apr√®s d√©connexion
    print("\n9Ô∏è‚É£ Test acc√®s apr√®s d√©connexion")
    try:
        response = requests.get(f"{BASE_URL}/api/auth/profile/", headers=headers)
        if response.status_code == 401:
            print("   ‚úÖ Acc√®s correctement refus√© apr√®s d√©connexion")
        else:
            print(f"   ‚ùå S√©curit√© d√©faillante apr√®s d√©connexion: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Erreur test post-d√©connexion: {e}")
    
    print(f"\nüéâ Tests de s√©curit√© termin√©s !")


if __name__ == "__main__":
    print("‚ö†Ô∏è  Assurez-vous que le serveur Django est d√©marr√© sur http://127.0.0.1:8000")
    input("Appuyez sur Entr√©e pour commencer les tests...")
    test_security()
