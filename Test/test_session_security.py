"""
Test de s√©curit√© des sessions
"""
import requests
import json

BASE_URL = "http://127.0.0.1:8000"

def test_session_security():
    """Test des param√®tres de s√©curit√© de session"""
    
    print("üîí Test de s√©curit√© des sessions Django")
    print("="*50)
    
    # 1. Connexion
    login_data = {
        "username": "admin",  # Remplace par ton username
        "password": "admin123"  # Remplace par ton mot de passe
    }
    
    try:
        print("1. Tentative de connexion...")
        response = requests.post(f"{BASE_URL}/api/auth/login/", json=login_data)
        
        if response.status_code == 200:
            data = response.json()
            access_token = data.get('access')
            print(f"   ‚úÖ Connexion r√©ussie pour: {data.get('user', {}).get('username')}")
            
            # 2. V√©rifier les param√®tres de s√©curit√©
            headers = {"Authorization": f"Bearer {access_token}"}
            security_response = requests.get(f"{BASE_URL}/api/auth/session-security/", headers=headers)
            
            if security_response.status_code == 200:
                security_info = security_response.json()
                print("\n2. Param√®tres de s√©curit√© actuels:")
                print(f"   ‚Ä¢ Dur√©e session: {security_info['session_cookie_age']} secondes ({security_info['session_cookie_age']//3600}h)")
                print(f"   ‚Ä¢ Expire √† fermeture navigateur: {security_info['session_expire_at_browser_close']}")
                print(f"   ‚Ä¢ Renouvellement √† chaque requ√™te: {security_info['session_save_every_request']}")
                print(f"   ‚Ä¢ Dur√©e token JWT access: {security_info['jwt_access_token_lifetime']}")
                print(f"   ‚Ä¢ Dur√©e token JWT refresh: {security_info['jwt_refresh_token_lifetime']}")
                print(f"   ‚Ä¢ Cl√© de session: {security_info['session_key']}")
                
                # 3. Test de d√©connexion forc√©e
                print("\n3. Test de d√©connexion forc√©e de toutes les sessions...")
                logout_response = requests.post(f"{BASE_URL}/api/auth/force-logout-all/", headers=headers)
                
                if logout_response.status_code == 200:
                    logout_data = logout_response.json()
                    print(f"   ‚úÖ {logout_data['message']}")
                    
                    # 4. V√©rifier que le token n'est plus valide
                    print("\n4. V√©rification que le token est invalid√©...")
                    test_response = requests.get(f"{BASE_URL}/api/auth/profile/", headers=headers)
                    
                    if test_response.status_code == 401:
                        print("   ‚úÖ Token correctement invalid√©")
                    else:
                        print("   ‚ö†Ô∏è  Token encore actif")
                else:
                    print(f"   ‚ùå Erreur lors de la d√©connexion: {logout_response.text}")
            else:
                print(f"   ‚ùå Erreur acc√®s s√©curit√©: {security_response.text}")
        else:
            print(f"   ‚ùå Erreur de connexion: {response.text}")
            
    except requests.exceptions.ConnectionError:
        print("‚ùå Impossible de se connecter au serveur Django")
        print("   Assure-toi que le serveur tourne sur http://127.0.0.1:8000")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")

if __name__ == "__main__":
    test_session_security()
