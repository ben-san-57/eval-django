# ==============================================================================
# DOCKER-COMPOSE.PROD.YML - Le Mixologue Augmenté 
# Configuration optimisée pour la production
# ==============================================================================

services:
  # Base de données PostgreSQL production
  postgres:
    image: postgres:15-alpine
    container_name: cocktailaiser_postgres_prod
    environment:
      POSTGRES_DB: cocktailaiser_prod
      POSTGRES_USER: cocktailaiser_prod_user
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cocktailaiser_prod_user -d cocktailaiser_prod"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - cocktailaiser-prod-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Application Django production
  web:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: cocktailaiser_web_prod
    env_file:
      - .env.production
    volumes:
      - media_prod_data:/app/media
      - static_prod_data:/app/static
      - logs_prod_data:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Migration de la base de données...' &&
        python manage.py migrate &&
        echo 'Collecte des fichiers statiques...' &&
        python manage.py collectstatic --noinput &&
        echo 'Démarrage de Gunicorn...' &&
        gunicorn --bind 0.0.0.0:8000 --workers 3 --worker-class sync --timeout 120 --keep-alive 2 cocktailaiser.wsgi:application
      "
    restart: always
    networks:
      - cocktailaiser-prod-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
      replicas: 2

  # Ollama production (optionnel)
  ollama:
    image: ollama/ollama:latest
    container_name: cocktailaiser_ollama_prod
    volumes:
      - ollama_prod_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    command: >
      sh -c "
        ollama serve &
        sleep 30 &&
        ollama pull llama3.1 &&
        wait
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    restart: always
    networks:
      - cocktailaiser-prod-network
    profiles:
      - ollama
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # Redis pour cache et sessions
  redis:
    image: redis:7-alpine
    container_name: cocktailaiser_redis_prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_prod_data:/data
      - ./docker/redis/redis.conf:/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - cocktailaiser-prod-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx reverse proxy et load balancer
  nginx:
    image: nginx:alpine
    container_name: cocktailaiser_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/prod.conf:/etc/nginx/conf.d/default.conf
      - static_prod_data:/app/static:ro
      - media_prod_data:/app/media:ro
      - ./docker/ssl:/etc/ssl/certs:ro
      - logs_prod_data:/var/log/nginx
    depends_on:
      - web
    restart: always
    networks:
      - cocktailaiser-prod-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Monitoring avec Prometheus (optionnel)
  prometheus:
    image: prom/prometheus:latest
    container_name: cocktailaiser_prometheus
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: always
    networks:
      - cocktailaiser-prod-network
    profiles:
      - monitoring

  # Grafana pour dashboards (optionnel)
  grafana:
    image: grafana/grafana:latest
    container_name: cocktailaiser_grafana
    ports:
      - "127.0.0.1:3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/grafana.ini:/etc/grafana/grafana.ini
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    depends_on:
      - prometheus
    restart: always
    networks:
      - cocktailaiser-prod-network
    profiles:
      - monitoring

# Volumes production
volumes:
  postgres_prod_data:
    name: cocktailaiser_postgres_prod_data
  ollama_prod_data:
    name: cocktailaiser_ollama_prod_data
  redis_prod_data:
    name: cocktailaiser_redis_prod_data
  media_prod_data:
    name: cocktailaiser_media_prod_data
  static_prod_data:
    name: cocktailaiser_static_prod_data
  logs_prod_data:
    name: cocktailaiser_logs_prod_data
  prometheus_data:
    name: cocktailaiser_prometheus_data
  grafana_data:
    name: cocktailaiser_grafana_data

# Réseau production isolé
networks:
  cocktailaiser-prod-network:
    name: cocktailaiser-prod-network
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
